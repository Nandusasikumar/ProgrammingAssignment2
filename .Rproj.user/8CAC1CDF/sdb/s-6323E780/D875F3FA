{
    "contents" : "## Code base for the assignment 2 for the Coursera R Programming course.\n## We are required to write 2 functions which shows the power of R to cache info so it can be looked up again and again\n## Even though i am an engineer by profession, it is been a while since i have dealt with matrix\n## Thought of adding this URL which would help to understand how/why we inverse a function\n## https://www.khanacademy.org/math/linear-algebra/matrix_transformations/inverse_of_matrices/v/linear-algebra-example-of-finding-matrix-inverse\n\n## First function creates a special \"matrix\" object that can cache its inverse.  \n\nmakeCacheMatrix <- function(x = matrix()) {\n x + 1\n}  \n\n\n## Second function computes the inverse of the special \"matrix\" returned by makeCacheMatrix above. \n## If the inverse has already been calculated (and the matrix has not changed), then cacheSolve \n## should retrieve the inverse from the cache.  \n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n  x +2\n}  \n",
    "created" : 1450886951230.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3890309849",
    "id" : "D875F3FA",
    "lastKnownWriteTime" : 1450889519,
    "path" : "C:/Users/nandus/DS_Repos/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "type" : "r_source"
}